plot.BayesAMMI <- function(x, plot_selection = "all", ...) {
# Helper function for line plots
generate_line_plot <- function(data, y, x_label, y_label, title) {
ggplot(data, aes(x = seq_along(data[[y]]), y = data[[y]])) +
geom_line(color = "blue") +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = y_label, title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for histogram plots
generate_histogram <- function(data, x, x_label, title) {
ggplot(data, aes(x = data[[x]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = "Frequency", title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for biplots
generate_biplot <- function(alphas, gammas, title) {
alphas_df <- as.data.frame(alphas)
gammas_df <- as.data.frame(gammas)
ggplot() +
geom_point(data = alphas_df, aes(x = alphas1, y = alphas2)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_text(data = alphas_df, aes(x = alphas1, y = alphas2, label = rownames(alphas_df)),
vjust = "inward", hjust = "inward") +
geom_point(data = gammas_df, aes(x = gammas1, y = gammas2), color = "red") +
geom_segment(data = gammas_df,
aes(x = 0, y = 0, xend = gammas1, yend = gammas2),
arrow = arrow(length = unit(0.2, "cm")), color = "red") +
geom_text(data = gammas_df, aes(x = gammas1, y = gammas2, label = paste0("E", 1:nrow(gammas_df))),
vjust = "inward", hjust = "inward") +
labs(title = title, x = expression(PC[1]), y = expression(PC[2])) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Conditional plotting
if (plot_selection == "all" || plot_selection == 1 || plot_selection == 5) {
print(generate_line_plot(x$mu1, "mu", "Iterations", expression(mu), expression(paste("Trace Plot of ", mu))))
print(generate_histogram(x$mu1, "mu", expression(mu), expression(paste("Histogram of ", mu))))
}
if (plot_selection == "all" || plot_selection == 2 || plot_selection == 5) {
print(generate_line_plot(x$tau1, "tau", "Iterations", expression(sigma^2), expression(paste("Trace Plot of ", sigma^2))))
print(generate_histogram(x$tau1, "tau", expression(sigma^2), expression(paste("Histogram of ", sigma^2))))
}
if (plot_selection == "all" || plot_selection == 3 || plot_selection == 6) {
print(generate_biplot(x$alphas0, x$gammas0, "AMMI Method"))
}
if (plot_selection == "all" || plot_selection == 4 || plot_selection == 6) {
print(generate_biplot(x$alphas1, x$gammas1, "Bayesian AMMI Method"))
}
}
rm(list = ls())
setwd("/media/myaseen208/Documents1/MYaseen208/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/BayesAMMI2/BayesAMMI2")
getwd()
library(devtools)
devtools::load_all()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(quick = TRUE, build_vignettes = TRUE)
library(BayesAMMI2)
?bayes_ammi
fm1 <-
bayes_ammi(
.data = Maiz,
.y = y,
.gen = entry,
.env = site,
.rep = rep,
.nIter = 20
)
plot(fm1)
plot.BayesAMMI <- function(x, plot_selection = "all", ...) {
# Helper function for line plots
generate_line_plot <- function(data, y, x_label, y_label, title) {
ggplot(data, aes(x = seq_along(data[[y]]), y = data[[y]])) +
geom_line(color = "blue") +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = y_label, title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for histogram plots
generate_histogram <- function(data, x, x_label, title) {
ggplot(data, aes(x = data[[x]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = "Frequency", title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Enhanced biplot with ggrepel
generate_biplot <- function(alphas, gammas, title) {
alphas_df <- as.data.frame(alphas)
gammas_df <- as.data.frame(gammas)
ggplot() +
geom_point(data = alphas_df, aes(x = alphas1, y = alphas2), color = "blue", size = 3) +
geom_text_repel(
data = alphas_df,
aes(x = alphas1, y = alphas2, label = rownames(alphas_df)),
size = 4, fontface = "bold", max.overlaps = Inf
) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
geom_point(data = gammas_df, aes(x = gammas1, y = gammas2), color = "red", size = 3) +
geom_segment(
data = gammas_df,
aes(x = 0, y = 0, xend = gammas1, yend = gammas2),
arrow = arrow(length = unit(0.2, "cm")), color = "red"
) +
geom_text_repel(
data = gammas_df,
aes(x = gammas1, y = gammas2, label = paste0("E", 1:nrow(gammas_df))),
size = 4, fontface = "italic", max.overlaps = Inf
) +
labs(title = title, x = expression(PC[1]), y = expression(PC[2])) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Conditional plotting
if (plot_selection == "all" || plot_selection == 1 || plot_selection == 5) {
print(generate_line_plot(x$mu1, "mu", "Iterations", expression(mu), expression(paste("Trace Plot of ", mu))))
print(generate_histogram(x$mu1, "mu", expression(mu), expression(paste("Histogram of ", mu))))
}
if (plot_selection == "all" || plot_selection == 2 || plot_selection == 5) {
print(generate_line_plot(x$tau1, "tau", "Iterations", expression(sigma^2), expression(paste("Trace Plot of ", sigma^2))))
print(generate_histogram(x$tau1, "tau", expression(sigma^2), expression(paste("Histogram of ", sigma^2))))
}
if (plot_selection == "all" || plot_selection == 3 || plot_selection == 6) {
print(generate_biplot(x$alphas0, x$gammas0, "AMMI Method"))
}
if (plot_selection == "all" || plot_selection == 4 || plot_selection == 6) {
print(generate_biplot(x$alphas1, x$gammas1, "Bayesian AMMI Method"))
}
}
plot(fm1, plot_selection = "all")
library(tidyverse)
library(fastverse)
plot(fm1, plot_selection = "all")
library(ggrepel)
plot(fm1, plot_selection = "all")
#' @export
#' @rdname plot
plot.BayesAMMI <- function(x, plot_selection = "all", ...) {
# Helper function for line plots
generate_line_plot <- function(data, y, x_label, y_label, title) {
ggplot(data, aes(x = seq_along(data[[y]]), y = data[[y]])) +
geom_line(color = "blue") +
labs(x = x_label, y = y_label, title = title) +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
theme_classic()
}
# Helper function for histogram plots
generate_histogram <- function(data, x, x_label, title) {
ggplot(data, aes(x = data[[x]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
labs(x = x_label, y = "Frequency", title = title) +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
theme_classic()
}
# Helper function for biplots
generate_biplot <- function(alphas, gammas, title, max_labels = 10) {
alphas_df <- as.data.frame(alphas)
gammas_df <- as.data.frame(gammas)
# Select only the top `max_labels` genotypes and environments based on distance from origin
alphas_df$distance <- sqrt(alphas_df$alphas1^2 + alphas_df$alphas2^2)
gammas_df$distance <- sqrt(gammas_df$gammas1^2 + gammas_df$gammas2^2)
alphas_df <- alphas_df[order(-alphas_df$distance), ][1:max_labels, ]
gammas_df <- gammas_df[order(-gammas_df$distance), ][1:max_labels, ]
ggplot() +
geom_point(data = alphas_df, aes(x = alphas1, y = alphas2), color = "blue", size = 3) +
geom_text_repel(
data = alphas_df,
aes(x = alphas1, y = alphas2, label = rownames(alphas_df)),
size = 4, fontface = "bold", max.overlaps = Inf
) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
geom_point(data = gammas_df, aes(x = gammas1, y = gammas2), color = "red", size = 3) +
geom_segment(
data = gammas_df,
aes(x = 0, y = 0, xend = gammas1, yend = gammas2),
arrow = arrow(length = unit(0.2, "cm")), color = "red"
) +
geom_text_repel(
data = gammas_df,
aes(x = gammas1, y = gammas2, label = paste0("E", 1:nrow(gammas_df))),
size = 4, fontface = "italic", max.overlaps = Inf
) +
labs(title = title, x = expression(PC[1]), y = expression(PC[2])) +
theme_classic()
}
# Conditional plotting
if (plot_selection == "all" || plot_selection == 1 || plot_selection == 5) {
print(generate_line_plot(x$mu1, "mu", "Iterations", expression(mu), expression(paste("Trace Plot of ", mu))))
print(generate_histogram(x$mu1, "mu", expression(mu), expression(paste("Histogram of ", mu))))
}
if (plot_selection == "all" || plot_selection == 2 || plot_selection == 5) {
print(generate_line_plot(x$tau1, "tau", "Iterations", expression(sigma^2), expression(paste("Trace Plot of ", sigma^2))))
print(generate_histogram(x$tau1, "tau", expression(sigma^2), expression(paste("Histogram of ", sigma^2))))
}
if (plot_selection == "all" || plot_selection == 3 || plot_selection == 6) {
print(generate_biplot(x$alphas0, x$gammas0, "AMMI Method", max_labels = 10))
}
if (plot_selection == "all" || plot_selection == 4 || plot_selection == 6) {
print(generate_biplot(x$alphas1, x$gammas1, "Bayesian AMMI Method", max_labels = 10))
}
}
# Register the method for the BayesAMMI class
plot.BayesAMMI <- plot.BayesAMMI
plot(fm1)
plot.BayesAMMI <- function(x, plot_selection = "all", ...) {
# Helper function for line plots
generate_line_plot <- function(data, y, x_label, y_label, title) {
ggplot(data, aes(x = seq_along(data[[y]]), y = data[[y]])) +
geom_line(color = "blue") +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = y_label, title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for histogram plots
generate_histogram <- function(data, x, x_label, title) {
ggplot(data, aes(x = data[[x]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = "Frequency", title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Enhanced biplot with ggrepel
generate_biplot <- function(alphas, gammas, title) {
alphas_df <- as.data.frame(alphas)
gammas_df <- as.data.frame(gammas)
ggplot() +
geom_point(data = alphas_df, aes(x = alphas1, y = alphas2), color = "blue", size = 3) +
geom_text_repel(
data = alphas_df,
aes(x = alphas1, y = alphas2, label = rownames(alphas_df)),
size = 4, fontface = "bold", max.overlaps = Inf
) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
geom_point(data = gammas_df, aes(x = gammas1, y = gammas2), color = "red", size = 3) +
geom_segment(
data = gammas_df,
aes(x = 0, y = 0, xend = gammas1, yend = gammas2),
arrow = arrow(length = unit(0.2, "cm")), color = "red"
) +
geom_text_repel(
data = gammas_df,
aes(x = gammas1, y = gammas2, label = paste0("E", 1:nrow(gammas_df))),
size = 4, fontface = "italic", max.overlaps = Inf
) +
labs(title = title, x = expression(PC[1]), y = expression(PC[2])) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Conditional plotting
if (plot_selection == "all" || plot_selection == 1 || plot_selection == 5) {
print(generate_line_plot(x$mu1, "mu", "Iterations", expression(mu), expression(paste("Trace Plot of ", mu))))
print(generate_histogram(x$mu1, "mu", expression(mu), expression(paste("Histogram of ", mu))))
}
if (plot_selection == "all" || plot_selection == 2 || plot_selection == 5) {
print(generate_line_plot(x$tau1, "tau", "Iterations", expression(sigma^2), expression(paste("Trace Plot of ", sigma^2))))
print(generate_histogram(x$tau1, "tau", expression(sigma^2), expression(paste("Histogram of ", sigma^2))))
}
if (plot_selection == "all" || plot_selection == 3 || plot_selection == 6) {
print(generate_biplot(x$alphas0, x$gammas0, "AMMI Method"))
}
if (plot_selection == "all" || plot_selection == 4 || plot_selection == 6) {
print(generate_biplot(x$alphas1, x$gammas1, "Bayesian AMMI Method"))
}
}
plot(fm1, plot_selection = "all")
#' @export
#'
plot.BayesAMMI <- function(x, plot_selection = "all", ...) {
# Helper function for line plots
generate_line_plot <- function(data, y, x_label, y_label, title) {
ggplot(data, aes(x = seq_along(data[[y]]), y = data[[y]])) +
geom_line(color = "blue") +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = y_label, title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for histogram plots
generate_histogram <- function(data, x, x_label, title) {
ggplot(data, aes(x = data[[x]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
scale_x_continuous(breaks = scales::pretty_breaks()) +
scale_y_continuous(breaks = scales::pretty_breaks()) +
labs(x = x_label, y = "Frequency", title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for biplots
generate_biplot <- function(alphas, gammas, title) {
alphas_df <- as.data.frame(alphas)
gammas_df <- as.data.frame(gammas)
ggplot() +
geom_point(data = alphas_df, aes(x = alphas1, y = alphas2)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_text(data = alphas_df, aes(x = alphas1, y = alphas2, label = rownames(alphas_df)),
vjust = "inward", hjust = "inward") +
geom_point(data = gammas_df, aes(x = gammas1, y = gammas2), color = "red") +
geom_segment(data = gammas_df,
aes(x = 0, y = 0, xend = gammas1, yend = gammas2),
arrow = arrow(length = unit(0.2, "cm")), color = "red") +
geom_text(data = gammas_df, aes(x = gammas1, y = gammas2, label = paste0("E", 1:nrow(gammas_df))),
vjust = "inward", hjust = "inward") +
labs(title = title, x = expression(PC[1]), y = expression(PC[2])) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Conditional plotting
if (plot_selection == "all" || plot_selection == 1 || plot_selection == 5) {
print(generate_line_plot(x$mu1, "mu", "Iterations", expression(mu), expression(paste("Trace Plot of ", mu))))
print(generate_histogram(x$mu1, "mu", expression(mu), expression(paste("Histogram of ", mu))))
}
if (plot_selection == "all" || plot_selection == 2 || plot_selection == 5) {
print(generate_line_plot(x$tau1, "tau", "Iterations", expression(sigma^2), expression(paste("Trace Plot of ", sigma^2))))
print(generate_histogram(x$tau1, "tau", expression(sigma^2), expression(paste("Histogram of ", sigma^2))))
}
if (plot_selection == "all" || plot_selection == 3 || plot_selection == 6) {
print(generate_biplot(x$alphas0, x$gammas0, "AMMI Method"))
}
if (plot_selection == "all" || plot_selection == 4 || plot_selection == 6) {
print(generate_biplot(x$alphas1, x$gammas1, "Bayesian AMMI Method"))
}
}
plot(fm1, plot_selection = "all")
names(fm1)
plot.BayesAMMI <- function(x, plot_selection = "all", ...) {
# Helper function for line plots
generate_line_plot <- function(data, y, x_label, y_label, title) {
ggplot(data, aes(x = seq_along(data[[y]]), y = data[[y]])) +
geom_line(color = "blue") +
scale_x_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
labs(x = x_label, y = y_label, title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for histogram plots
generate_histogram <- function(data, x, x_label, title) {
ggplot(data, aes(x = data[[x]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
scale_x_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
labs(x = x_label, y = "Frequency", title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for biplots
generate_biplot <- function(alphas, gammas, title, max_labels = 10) {
alphas_df <- as.data.frame(alphas)
gammas_df <- as.data.frame(gammas)
alphas_df$distance <- sqrt(alphas_df$alphas1^2 + alphas_df$alphas2^2)
gammas_df$distance <- sqrt(gammas_df$gammas1^2 + gammas_df$gammas2^2)
alphas_df <- alphas_df[order(-alphas_df$distance), ][1:max_labels, ]
gammas_df <- gammas_df[order(-gammas_df$distance), ][1:max_labels, ]
ggplot() +
geom_point(data = alphas_df, aes(x = alphas1, y = alphas2), color = "blue", size = 3) +
geom_text_repel(data = alphas_df, aes(x = alphas1, y = alphas2, label = rownames(alphas_df)),
size = 4, max.overlaps = Inf) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
geom_point(data = gammas_df, aes(x = gammas1, y = gammas2), color = "red", size = 3) +
geom_segment(data = gammas_df, aes(x = 0, y = 0, xend = gammas1, yend = gammas2),
arrow = arrow(length = unit(0.2, "cm")), color = "red") +
geom_text_repel(data = gammas_df, aes(x = gammas1, y = gammas2, label = paste0("E", 1:nrow(gammas_df))),
size = 4, max.overlaps = Inf) +
labs(title = title, x = expression(PC[1]), y = expression(PC[2])) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Generate plots based on `plot_selection`
if (plot_selection == "all" || plot_selection == 1) {
print(generate_line_plot(x$mu1, "mu", "Iterations", expression(mu), expression("Trace Plot of " ~ mu)))
print(generate_histogram(x$mu1, "mu", expression(mu), expression("Histogram of " ~ mu)))
}
if (plot_selection == "all" || plot_selection == 2) {
print(generate_line_plot(x$tau1, "tau", "Iterations", expression(sigma^2), expression("Trace Plot of " ~ sigma^2)))
print(generate_histogram(x$tau1, "tau", expression(sigma^2), expression("Histogram of " ~ sigma^2)))
}
if (plot_selection == "all" || plot_selection == 3) {
print(generate_line_plot(x$tao1, "tao1", "Iterations", expression(alpha[1]), expression("Trace Plot of " ~ alpha[1])))
print(generate_histogram(x$tao1, "tao1", expression(alpha[1]), expression("Histogram of " ~ alpha[1])))
}
if (plot_selection == "all" || plot_selection == 4) {
print(generate_line_plot(x$delta1, "delta1", "Iterations", expression(beta[1]), expression("Trace Plot of " ~ beta[1])))
print(generate_histogram(x$delta1, "delta1", expression(beta[1]), expression("Histogram of " ~ beta[1])))
}
if (plot_selection == "all" || plot_selection == 5) {
print(generate_biplot(x$alphas0, x$gammas0, "AMMI Method"))
}
if (plot_selection == "all" || plot_selection == 6) {
print(generate_biplot(x$alphas1, x$gammas1, "Bayesian AMMI Method"))
}
}
plot(fm1, plot_selection = "all")  # All plots
names(fm1)
plot.BayesAMMI <- function(x, plot_selection = "all", ...) {
# Helper function for line plots
generate_line_plot <- function(data, y, x_label, y_label, title) {
ggplot(data, aes(x = seq_along(data[[y]]), y = data[[y]])) +
geom_line(color = "blue") +
scale_x_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
labs(x = x_label, y = y_label, title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for histogram plots
generate_histogram <- function(data, x, x_label, title) {
ggplot(data, aes(x = data[[x]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
scale_x_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
scale_y_continuous(labels = scales::comma, breaks = scales::pretty_breaks()) +
labs(x = x_label, y = "Frequency", title = title) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Helper function for biplots
generate_biplot <- function(alphas, gammas, title) {
alphas_df <- as.data.frame(alphas)
gammas_df <- as.data.frame(gammas)
ggplot() +
geom_point(data = alphas_df, aes(x = alphas1, y = alphas2)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_text(data = alphas_df, aes(x = alphas1, y = alphas2, label = rownames(alphas_df)),
vjust = "inward", hjust = "inward") +
geom_point(data = gammas_df, aes(x = gammas1, y = gammas2), color = "red") +
geom_segment(data = gammas_df,
aes(x = 0, y = 0, xend = gammas1, yend = gammas2),
arrow = arrow(length = unit(0.2, "cm")), color = "red") +
geom_text(data = gammas_df, aes(x = gammas1, y = gammas2, label = paste0("E", 1:nrow(gammas_df))),
vjust = "inward", hjust = "inward") +
labs(title = title, x = expression(PC[1]), y = expression(PC[2])) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
}
# Generate plots based on `plot_selection`
if (plot_selection == "all" || plot_selection == 1) {
print(generate_line_plot(x$mu1, "mu", "Iterations", expression(mu), expression("Trace Plot of " ~ mu)))
print(generate_histogram(x$mu1, "mu", expression(mu), expression("Histogram of " ~ mu)))
}
if (plot_selection == "all" || plot_selection == 2) {
print(generate_line_plot(x$tau1, "tau", "Iterations", expression(sigma^2), expression("Trace Plot of " ~ sigma^2)))
print(generate_histogram(x$tau1, "tau", expression(sigma^2), expression("Histogram of " ~ sigma^2)))
}
if (plot_selection == "all" || plot_selection == 3) {
print(generate_line_plot(x$tao1, "tao1", "Iterations", expression(alpha[1]), expression("Trace Plot of " ~ alpha[1])))
print(generate_histogram(x$tao1, "tao1", expression(alpha[1]), expression("Histogram of " ~ alpha[1])))
}
if (plot_selection == "all" || plot_selection == 4) {
print(generate_line_plot(x$delta1, "delta1", "Iterations", expression(beta[1]), expression("Trace Plot of " ~ beta[1])))
print(generate_histogram(x$delta1, "delta1", expression(beta[1]), expression("Histogram of " ~ beta[1])))
}
if (plot_selection == "all" || plot_selection == 5) {
print(generate_biplot(x$alphas0, x$gammas0, "AMMI Method"))
}
if (plot_selection == "all" || plot_selection == 6) {
print(generate_biplot(x$alphas1, x$gammas1, "Bayesian AMMI Method"))
}
}
plot(fm1, plot_selection = "all")  # All plots
rm(list = ls())
setwd("/media/myaseen208/Documents1/MYaseen208/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/BayesAMMI2/BayesAMMI2")
getwd()
library(devtools)
devtools::load_all()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(quick = TRUE, build_vignettes = TRUE)
library(BayesAMMI2)
data(Maiz)
fm1 <-
bayes_ammi(
.data = Maiz,
.y = y,
.gen = entry,
.env = site,
.rep = rep,
.nIter = 20
)
plot(fm1)
library(BayesAMMI2)
ls("package::BayesAMMI2")
ls("package:BayesAMMI2")
rm(list = ls())
setwd("/media/myaseen208/Documents1/MYaseen208/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/BayesAMMI2/BayesAMMI2")
getwd()
library(devtools)
devtools::load_all()
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
devtools::install(quick = TRUE, build_vignettes = TRUE)
shiny::runApp('inst/shinyapp')
